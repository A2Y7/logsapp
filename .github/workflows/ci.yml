# Имя нашего полного CI/CD процесса
name: CI/CD - Сборка, публикация и развертывание

# Триггер: запускать при пуше в ветку "main"
on:
  push:
    branches: [ "main" ]

# Задачи, которые нужно выполнить
jobs:
  # Задача №1: Сборка и публикация образа (она у вас уже была)
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Скачивание кода
        uses: actions/checkout@v3

      - name: Вход в GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Сборка и публикация образа
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ toLowerCase(github.repository) }}:latest

  # Задача №2: Развертывание на сервере (новая!)
  deploy:
    # Запускать эту задачу только после успешного завершения 'build-and-push'
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Развертывание на сервере
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Шаг 1: Логинимся в GitHub Container Registry на сервере
            echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Шаг 2: Скачиваем последнюю версию нашего Docker-образа
            docker pull ghcr.io/${{ toLowerCase(github.repository) }}:latest
            
            # Шаг 3: Останавливаем и удаляем старый контейнер (если он был)
            # '|| true' нужно, чтобы команда не завершилась с ошибкой, если контейнера еще нет
            docker stop logsapp || true
            docker rm logsapp || true
            
            # Шаг 4: Запускаем новый контейнер из свежего образа
            # ВАЖНО: Замените 80:3000 на ваши порты! Формат: <порт_на_сервере>:<порт_в_контейнере>
            docker run -d --restart always -p 80:3000 --name logsapp ghcr.io/${{ toLowerCase(github.repository) }}:latest
            
            # Шаг 5 (опциональный): Очищаем систему от старых, неиспользуемых образов
            docker image prune -af